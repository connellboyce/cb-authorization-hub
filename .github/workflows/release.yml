name: Release, Build & Push Docker Image

on:
  workflow_dispatch:


jobs:
  prepare-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    outputs:
      release_version: ${{ steps.set-version.outputs.release_version }}
      release_branch: ${{ steps.set-version.outputs.release_branch }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Calculate and set release version
        id: set-version
        run: |
          CURRENT=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          BASE=${CURRENT%-SNAPSHOT}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE"
          
          RELEASE_VERSION="$MAJOR.$MINOR.$PATCH"
          RELEASE_BRANCH="release/v$RELEASE_VERSION"
          
          echo "release_version=$RELEASE_VERSION" >> $GITHUB_OUTPUT
          echo "release_branch=$RELEASE_BRANCH" >> $GITHUB_OUTPUT
          
          mvn versions:set -DnewVersion=$RELEASE_VERSION -DgenerateBackupPoms=false

      - name: Create release branch and push changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git checkout -b ${{ steps.set-version.outputs.release_branch }}
          git add pom.xml
          git commit -m "ci: Prepare release ${{ steps.set-version.outputs.release_version }}"
          git tag v${{ steps.set-version.outputs.release_version }}
          git push origin ${{ steps.set-version.outputs.release_branch }}
          git push origin v${{ steps.set-version.outputs.release_version }}

  github-release:
    needs: prepare-release
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.prepare-release.outputs.release_version }}
          name: Release v${{ needs.prepare-release.outputs.release_version }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-push-docker:
    needs: [prepare-release, github-release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build Maven project
        run: mvn package

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          IMAGE=ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}
          docker build -t $IMAGE:latest -t $IMAGE:${{ needs.prepare-release.outputs.release_version }} .
          docker push $IMAGE:latest
          docker push $IMAGE:${{ needs.prepare-release.outputs.release_version }}

  bump-to-snapshot:
    needs: [build-and-push-docker]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Bump to next SNAPSHOT version
        id: bump-version
        run: |
          CURRENT=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          BASE=${CURRENT%-SNAPSHOT}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE"

          # Increment minor, reset patch
          MINOR=$((MINOR + 1))
          PATCH=0
          NEXT_VERSION="$MAJOR.$MINOR.$PATCH-SNAPSHOT"

          mvn versions:set -DnewVersion=$NEXT_VERSION -DgenerateBackupPoms=false
          echo "next_snapshot_version=$NEXT_VERSION" >> $GITHUB_OUTPUT

      - name: Push version bump branch and create PR
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git checkout -b ci/bump-to-${{ steps.bump-version.outputs.next_snapshot_version }}
          git add pom.xml
          git commit -m "ci: Bump version to ${{ steps.bump-version.outputs.next_snapshot_version }}"
          git push origin ci/bump-to-${{ steps.bump-version.outputs.next_snapshot_version }}
          
          gh auth setup-git
          gh pr create \
            --title "ci: Bump to ${{ steps.bump-version.outputs.next_snapshot_version }}" \
            --body "This PR bumps the version to the next development iteration." \
            --head ci/bump-to-${{ steps.bump-version.outputs.next_snapshot_version }} \
            --base main

  merge-pr:
    needs: bump-to-snapshot
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Wait for all PR checks to succeed
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          echo "Fetching PR number..."
          PR_NUMBER=$(gh pr list --state open --base main --json number,headRefName --jq \
          '.[] | select(.headRefName | startswith("ci/bump-to-")) | .number' | head -n 1)
          
          if [ -z "$PR_NUMBER" ]; then
            echo "No matching PR found from a ci/bump-to-* branch."
            exit 1
          fi
          
          echo "Fetching commit SHA..."
          COMMIT_SHA=$(gh pr view "$PR_NUMBER" --json commits --jq '.commits[-1].oid')
          
          echo "Waiting for checks on commit $COMMIT_SHA to succeed..."
          for i in {1..30}; do
            STATUS=$(gh api /repos/${{ github.repository }}/commits/$COMMIT_SHA/status \
              --jq '.state')
            echo "Current status: $STATUS"
            if [[ "$STATUS" == "success" ]]; then
              echo "All checks passed!"
              break
            elif [[ "$STATUS" == "failure" ]]; then
              echo "Some checks failed. Aborting."
              exit 1
            fi
            echo "Checks not yet successful. Sleeping 30s..."
            sleep 30
          done

      - name: Merge PR
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          gh pr merge "$PR_NUMBER" --merge --admin
